{
  "description": "The `mcp-agent` project is an AI Agent Framework designed to orchestrate complex AI behaviors. At its core, the **Agent & Workflow Orchestration** component defines agent logic and manages the execution of tasks and intricate workflows, leveraging various AI agent patterns. This component relies heavily on **AI Model Services** for integrating with Large Language Models (LLMs) and embedding models, providing the necessary intelligence for agent operations. A **Tool & Capability Registry** centralizes the discovery and invocation of executable actions that agents can utilize. All these foundational components are initialized and configured by the **Core Application Services**, which manages the overall application lifecycle and global context. Finally, the framework interacts with external systems and human users through the **External Communication & Interaction** component, facilitating multi-agent collaboration via the Multi-Agent Communication Protocol (MCP) and handling direct human input and output.",
  "components": [
    {
      "name": "Core Application Services",
      "description": "Initializes and manages the overall application lifecycle, global context, and provides access to application-wide configuration settings. It acts as the central orchestrator for setting up the environment.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_agent.app.MCPApp",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/app.py",
          "reference_start_line": 34,
          "reference_end_line": 508
        },
        {
          "qualified_name": "mcp_agent.core.context.initialize_context",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/core/context.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_agent.config.get_settings",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/config.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_agent.config.Settings",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/config.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    },
    {
      "name": "Agent & Workflow Orchestration",
      "description": "Defines the fundamental AI agent abstraction, manages the execution of tasks and complex workflows, and orchestrates various AI agent patterns (e.g., Orchestration, Parallel, Intent Classification). It serves as the central brain and execution engine for agent behaviors.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_agent.agents.agent.Agent",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/agents/agent.py",
          "reference_start_line": 56,
          "reference_end_line": 934
        },
        {
          "qualified_name": "mcp_agent.executor.executor.Executor",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/executor/executor.py",
          "reference_start_line": 52,
          "reference_end_line": 239
        },
        {
          "qualified_name": "mcp_agent.executor.workflow.Workflow",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/executor/workflow.py",
          "reference_start_line": 71,
          "reference_end_line": 528
        },
        {
          "qualified_name": "mcp_agent.workflows.orchestrator.orchestrator.Orchestrator",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/orchestrator/orchestrator.py",
          "reference_start_line": 45,
          "reference_end_line": 585
        },
        {
          "qualified_name": "mcp_agent.workflows.parallel.parallel_llm.ParallelLLM",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/parallel/parallel_llm.py",
          "reference_start_line": 23,
          "reference_end_line": 279
        },
        {
          "qualified_name": "mcp_agent.workflows.intent_classifier.intent_classifier_base.IntentClassifier",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/intent_classifier/intent_classifier_base.py",
          "reference_start_line": 42,
          "reference_end_line": 85
        }
      ]
    },
    {
      "name": "AI Model Services",
      "description": "Provides a unified interface for interacting with various Large Language Models (LLMs) and embedding models. It handles model selection, prompt conversion, tool calling through LLMs, and text embedding generation for semantic understanding.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_agent.workflows.llm.augmented_llm.AugmentedLLM",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/llm/augmented_llm.py",
          "reference_start_line": 218,
          "reference_end_line": 668
        },
        {
          "qualified_name": "mcp_agent.workflows.llm.llm_selector.ModelSelector",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/llm/llm_selector.py",
          "reference_start_line": 96,
          "reference_end_line": 413
        },
        {
          "qualified_name": "mcp_agent.workflows.embedding.embedding_base.EmbeddingModel",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/workflows/embedding/embedding_base.py",
          "reference_start_line": 13,
          "reference_end_line": 31
        }
      ]
    },
    {
      "name": "External Communication & Interaction",
      "description": "Manages all external communication, including interaction with Multi-Agent Communication Protocol (MCP) servers for capability aggregation, and handling human input/output for interactive agent experiences.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_agent.mcp.mcp_aggregator.MCPAggregator",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/mcp/mcp_aggregator.py",
          "reference_start_line": 77,
          "reference_end_line": 1357
        },
        {
          "qualified_name": "mcp_agent.mcp.mcp_connection_manager.MCPConnectionManager",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/mcp/mcp_connection_manager.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_agent.human_input.handler.console_input_callback",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/human_input/handler.py",
          "reference_start_line": 67,
          "reference_end_line": 72
        },
        {
          "qualified_name": "mcp_agent.elicitation.handler.console_elicitation_callback",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/elicitation/handler.py",
          "reference_start_line": 137,
          "reference_end_line": 151
        }
      ]
    },
    {
      "name": "Tool & Capability Registry",
      "description": "Centralizes the registration, discovery, and invocation of various executable capabilities (activities, decorators, signals) that agents and workflows can utilize, acting as a repository of available \"tools\" or functions.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_agent.executor.task_registry.ActivityRegistry",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/executor/task_registry.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_agent.executor.decorator_registry.DecoratorRegistry",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/executor/decorator_registry.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_agent.executor.signal_registry.SignalRegistry",
          "reference_file": "/mnt/e/StartUp/mcp-agent/src/mcp_agent/executor/signal_registry.py",
          "reference_start_line": 3,
          "reference_end_line": 29
        }
      ]
    }
  ],
  "components_relations": [
    {
      "relation": "configures",
      "src_name": "Core Application Services",
      "dst_name": "Agent & Workflow Orchestration"
    },
    {
      "relation": "configures",
      "src_name": "Core Application Services",
      "dst_name": "AI Model Services"
    },
    {
      "relation": "configures",
      "src_name": "Core Application Services",
      "dst_name": "External Communication & Interaction"
    },
    {
      "relation": "configures",
      "src_name": "Core Application Services",
      "dst_name": "Tool & Capability Registry"
    },
    {
      "relation": "utilizes",
      "src_name": "Agent & Workflow Orchestration",
      "dst_name": "AI Model Services"
    },
    {
      "relation": "utilizes",
      "src_name": "Agent & Workflow Orchestration",
      "dst_name": "Tool & Capability Registry"
    },
    {
      "relation": "interacts with",
      "src_name": "Agent & Workflow Orchestration",
      "dst_name": "External Communication & Interaction"
    },
    {
      "relation": "provides capabilities to",
      "src_name": "AI Model Services",
      "dst_name": "Agent & Workflow Orchestration"
    },
    {
      "relation": "facilitates interaction for",
      "src_name": "External Communication & Interaction",
      "dst_name": "Agent & Workflow Orchestration"
    },
    {
      "relation": "provides capabilities to",
      "src_name": "Tool & Capability Registry",
      "dst_name": "Agent & Workflow Orchestration"
    }
  ]
}
